'use strict';
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
const
    TelegramBot = require('telegram-bot-oop-way'),
    YartrUtils = require('./lib/yartrUtils.js'),
    log = require('simple-node-logger').createSimpleFileLogger('project.log'),
    argvToken = '' + process.argv[2],
    coordsMap = require('./stations/stations.json');

class YartrBot extends TelegramBot {

    constructor(token, coordsMap) {
        super(token);
        let self = this;
        self.coordsMap = coordsMap;
        this.registerOnTextCallback(/[a-z–∞-—è]/gim, self.ontextCb.bind(self));
    }
    onLocation(locationMsg) {
        let nearestStation = YartrUtils.getNearestStationKey(locationMsg.location),
            nearestStationLinks = this.coordsMap[nearestStation].links,
            userLocationKeyboard = YartrUtils.generateLocationKeyboardOptions(nearestStationLinks),
            userName = this.getUserName(locationMsg);

        log.info('–ü—Ä–∏—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç ', userName, '. –õ–æ–∫–∞—Ü–∏—è: ', '"', locationMsg.location, '"');
        this.sendMessage(locationMsg.chat.id, `–ë–ª–∏–∂–µ –≤—Å–µ–≥–æ: ${stationKey}.`, userLocationKeyboard);
    }
    onCallbackQuery(msg) {
        let msgId = msg.from.id,
            url = `http://yartr.ru/rasp.php?vt=1&nmar=78&q=1&id=${msg.data}&view=2`,
            userName = this.getUserName(msg);

        this.answerCallbackQuery(msg.id, '–û–∫, –ø–æ–µ—Ö–∞–ª–∏!');
        log.info('–ì—Ä–∞–±–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ', userName, '. —Å—Å—ã–ª–∫–∞: ', '"', url, '"');
        YartrUtils.resolveLink(url, this, msg).then((answer) => this.sendMessage(msgId, answer));
    }
    ontextCb(msg) {
        log.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ', this.getUserName(msg), '. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ', '"', msg.text, '"');
        this.sendMessage(msg.chat.id, 'üì° –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    }
    
}


new YartrBot(argvToken, coordsMap);
